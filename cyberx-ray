package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
	"time"

	"github.com/fatih/color"
)

// Banner print function
func printBanner() {
	color.Cyan("\nPROFESSOR\n")
	fmt.Println("Made by Virendra Kumar\n")
}

// Fetch website headers and content
func fetchWebsite(url string) (*http.Response, string, error) {
	client := &http.Client{
		Timeout: 10 * time.Second,
	}

	resp, err := client.Get(url)
	if err != nil {
		return nil, "", err
	}
	defer resp.Body.Close()

	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, "", err
	}

	return resp, string(body), nil
}

// Detect technologies
func detectTechnologies(url string) {
	resp, body, err := fetchWebsite(url)
	if err != nil {
		fmt.Println("Error fetching website:", err)
		return
	}

	headers := resp.Header
	fmt.Println("\n[+] Detecting Technologies for:", url)

	// Detect Web Server
	if server, ok := headers["Server"]; ok {
		fmt.Println("[+] Web Server:", server[0])
	} else {
		fmt.Println("[+] Web Server: Not Found")
	}

	// Detect CDN
	cdnProviders := map[string]string{
		"Cloudflare":         "cf-ray",
		"Akamai":             "akamaighost",
		"Fastly":             "fastly",
		"Amazon CloudFront":  "cloudfront",
	}

	cdnDetected := "No CDN detected"
	for name, identifier := range cdnProviders {
		if _, ok := headers[identifier]; ok || strings.Contains(strings.ToLower(body), identifier) {
			cdnDetected = name
			break
		}
	}
	fmt.Println("[+] CDN:", cdnDetected)

	// Detect Firewall
	firewallDetected := "No Firewall detected"
	firewallSignatures := []string{"x-sucuri-id", "x-sucuri-cache", "cf-ray", "mod_security"}

	for _, signature := range firewallSignatures {
		if _, ok := headers[signature]; ok {
			firewallDetected = "Detected"
			break
		}
	}
	fmt.Println("[+] Firewall:", firewallDetected)

	// Detect CMS
	cmsDetected := "No CMS detected"
	cmsSignatures := map[string][]string{
		"WordPress": {"wp-content", "wp-includes", "wp-json"},
		"Joomla":    {"Joomla", "joomla.js"},
		"Drupal":    {"drupal", "sites/default/files"},
		"Magento":   {"Mage", "Magento", "skin/frontend"},
		"Next.js":   {"_next", "__NEXT_DATA__"},
	}

	for name, signatures := range cmsSignatures {
		for _, signature := range signatures {
			if strings.Contains(strings.ToLower(body), signature) {
				cmsDetected = name
				break
			}
		}
		if cmsDetected != "No CMS detected" {
			break
		}
	}
	fmt.Println("[+] CMS:", cmsDetected)
}

func main() {
	printBanner()
	fmt.Print("Enter website URL (with http/https): ")
	var url string
	fmt.Scanln(&url)

	detectTechnologies(url)
}
